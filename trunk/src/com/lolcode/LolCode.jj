/**
 * LOLCODE grammar
 * A grammar for Adam Lindsay's LOLCODE programming language
 * http://lolcode.com
 *
 */
PARSER_BEGIN(LolCode)

package com.lolcode;

import java.util.List;
import java.util.ArrayList;

/**
 * A parser for Adam Lindsay's <a href="http://lolcode.com">LOLCODE</a> programming language
 *
 *
 * @author brianegge
 */
public final class LolCode {
}

PARSER_END(LolCode)

/*********************
 * Lexer specification
 *********************/

TOKEN : 
{
  < HAI : "HAI" >
| < CAN : "CAN" >
| < HAS : "HAS" >
| < A : "A" >
| < I : "I" >
| < N : "N" >
| < IM : "IM" >
| < IN : "IN" >
| < IZ : "IZ" >
| < YR : "YR" >
| < UP : "UP" >
| < KTHX : "KTHX" >
| < KTHXBYE : "KTHXBYE" >
| < LOOP : "LOOP" >
| < THAN : "THAN" >
| < OUTTA : "OUTTA" >
| < BIGGER : "BIGGER" >
| < GIMMEH : "GIMMEH" >
| < PLZ : "PLZ" >
| < AWSUM_THX : "AWSUM THX" >
| < O_NOES : "O NOES" >
| < O_RLY : "O RLY" >
| < YA_RLY : "YA RLY" >
| < NO_WAI : "NO WAI" >
| < OPEN : "OPEN" >
| < QUESTION : "?" >
| < VISIBLE : "VISIBLE" >
| < INVISIBLE : "INVISIBLE" >
| < BANG : "!!" >
| < QUOTED_STRING : "\"" (~["\""])+ "\"" >
| < INTEGER : ["1"-"9"] (["0"-"9"])* >
| < IDENT : (["A"-"Z"])+ >
| < EOL : "\n" | "\r" | "\r\n" >
}

SKIP :
{
 " " | "\t"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "BTW" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}


/****************
 * Grammer Specification
 ****************/

/**
 * Execute the parsed Mars script
 */
LolTree start() :
{
  LolTree tree = new LolTree(null);
  List<Statement> list;
}
{
  <HAI> <EOL>
  (
    list = statements()
    { tree.addAll(list); }
   )* 
  <KTHXBYE>
  {
    return tree;
  }
}

Statement statement() :
{
  Statement s;
  Token t;
}
{
  <CAN> <HAS> t=<IDENT> <QUESTION> <EOL> { return new StatementRequire(t); }
| s = write() <EOL> { return s; }
| s = loop() { return s; }
| s = defineVariable() { return s; }
| <GIMMEH> <IDENT> <EOL> { return null; }
| s = function() { return s; }
| trycatch() { return null; }
}

List<Statement> statements() :
{
    List<Statement> list = new ArrayList<Statement>();
    Statement s;
}
{
  ( LOOKAHEAD(2) s=statement() { list.add(s); } )+
  {
    return list;
  }
}
StatementLoop loop() :
{
  List<Statement> list;
}
{
  <IM> <IN> <YR> <LOOP> <EOL>
  list = statements()
  <IM> <OUTTA> <YR> <LOOP> <EOL>
  {
    return new StatementLoop(list);
  }
}

Statement defineVariable() :
{
 Token t;
}
{
  <I> <HAS> <A> t=<IDENT> <EOL> { return new StatementDeclareVariable(t); }
}

Statement function() :
{
  Token verb;
  Token variable;
  Object arg;
  Expression expr;
}
{
  verb=<UP> variable=<IDENT> <BANG> arg=integer() <EOL> { return new StatementFunction(verb, variable, arg); }
|  LOOKAHEAD(2147483647) <IZ> expr=expr() <QUESTION> <KTHXBYE> <EOL> { return new StatementIfElse(expr, new StatementBreak()); }
|  <IZ> expr() <O_RLY> <QUESTION> <EOL> then() ( Else() )? <KTHX> <EOL>  { return null; }
| <OPEN> <IDENT> <QUOTED_STRING>  { return null; }
}

Expression expr() :
{
  Expression e;
  Token variable;
  Object arg;
}
{
  variable=<IDENT> <BIGGER> <THAN> arg=integer() { return new ExpressionBigger(variable, arg); }
}

void then() :
{}
{
  <YA_RLY> <EOL>
  ( statement() )*
}

void Else() :
{}
{
  <NO_WAI> <EOL>
  ( statement() )*
}

void trycatch() :
{}
{
  <PLZ> statement() <QUESTION> <EOL>
  <AWSUM_THX> <EOL>
    statement()
  <O_NOES> <EOL>
    statement()
}

StatementWrite write() :
{
  StatementWrite s = new StatementWrite();
  Object o;
}
{
  ( <VISIBLE>
   { s.setVisible(true); }
  | <INVISIBLE>
  )
   ( o = string() | o = <IDENT> )
    { s.add(o); }
    ( <N>
       ( o = string() | o = <IDENT> )
       { s.add(o); }
    )*
  {
    return s;
  }
}

int integer() :
{
 Token t;
}
{
  t=<INTEGER>
  {
    return Integer.parseInt(t.image);
  }
}

String string() :
{
 Token t;
}
{
 t = <QUOTED_STRING>
 {
   return t.image.substring(1, t.image.length() - 2);
 }
}
 