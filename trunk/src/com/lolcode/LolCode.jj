/**
 * LOLCODE grammar
 * A grammar for Adam Lindsay's LOLCODE programming language
 * http://lolcode.com
 *
 */
PARSER_BEGIN(LolCode)

package com.lolcode;

/**
 * A parser for Adam Lindsay's <a href="http://lolcode.com">LOLCODE</a> programming language
 * 
 *
 * @author brianegge
 */
public final class LolCode {

  /**
    * @param args optional; the name of the files to parse
    */
  public static void main(String args[]) throws ParseException {
    LolCode parser;
    if (args.length == 0) {
      parser = new LolCode(System.in);
      parser.start();
    } else {
      try {
          for (String file : args) {
            System.out.println("Checking " + file);
              parser = new LolCode(new java.io.FileInputStream(file));
              parser.start();
          }

      } catch (java.io.FileNotFoundException e) {
        System.err.println("File " + args[0] + " not found.");
        abort();
      }
    }
  }

  private static void abort() {
      System.out.println("LolCode:  Usage is one of:");
      System.out.println("         java LolCode < inputfile");
      System.out.println("OR");
      System.out.println("         java LolCode inputfile(s)");
      System.exit(1);
      return;
  }
}

PARSER_END(LolCode)

/*********************
 * Lexer specification
 *********************/

TOKEN : 
{
  < HAI : "HAI" >
| < CAN : "CAN" >
| < HAS : "HAS" >
| < A : "A" >
| < I : "I" >
| < N : "N" >
| < IM : "IM" >
| < IN : "IN" >
| < IZ : "IZ" >
| < YR : "YR" >
| < UP : "UP" >
| < KTHX : "KTHX" >
| < KTHXBYE : "KTHXBYE" >
| < LOOP : "LOOP" >
| < THAN : "THAN" >
| < STDIO : "STDIO" >
| < OUTTA : "OUTTA" >
| < BIGGER : "BIGGER" >
| < GIMMEH : "GIMMEH" >
| < PLZ : "PLZ" >
| < AWSUM_THX : "AWSUM THX" >
| < O_NOES : "O NOES" >
| < O_RLY : "O RLY" >
| < YA_RLY : "YA RLY" >
| < NO_WAI : "NO WAI" >
| < OPEN : "OPEN" >
| < QUESTION : "?" >
| < VISIBLE : "VISIBLE" >
| < INVISIBLE : "INVISIBLE" >
| < BANG : "!!" >
| < QUOTED_STRING : "\"" (~["\""])+ "\"" >
| < INTEGER : ["1"-"9"] (["0"-"9"])* >
| < IDENT : (["A"-"Z"])+ >
| < EOL : "\n" | "\r" | "\r\n" >
}

SKIP :
{
 " " | "\t"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "BTW" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}


/****************
 * Grammer Specification
 ****************/

/**
 * Execute the parsed Mars script
 */
void start() :
{}
{
  <HAI> <EOL>
  ( statement() )*
  <KTHXBYE>
}

void statement() :
{}
{
  <CAN> <HAS> <STDIO> <QUESTION> <EOL>
| write() <EOL>
| loop()
| defineVariable()
| <GIMMEH> <IDENT> <EOL>
| function()
| trycatch()
}

void loop() :
{}
{
  <IM> <IN> <YR> <LOOP> <EOL>
  ( LOOKAHEAD(2) statement() )+
  <IM> <OUTTA> <YR> <LOOP> <EOL>
}

void defineVariable() :
{}
{
  <I> <HAS> <A> <IDENT> <EOL>
}

void function() :
{}
{
  <UP> <IDENT> <BANG> <INTEGER> <EOL>
|  LOOKAHEAD(2147483647) <IZ> expr() <QUESTION> <KTHXBYE> <EOL>
|  <IZ> expr() <O_RLY> <QUESTION> <EOL> then() ( Else() )? <KTHX> <EOL>
| <OPEN> <IDENT> <QUOTED_STRING>
}

void expr() :
{}
{
  <IDENT> <BIGGER> <THAN> <INTEGER>
}

void then() :
{}
{
  <YA_RLY> <EOL>
  ( statement() )*
}

void Else() :
{}
{
  <NO_WAI> <EOL>
  ( statement() )*
}

void trycatch() :
{}
{
  <PLZ> statement() <QUESTION> <EOL>
  <AWSUM_THX> <EOL>
    statement()
  <O_NOES> <EOL>
    statement()
}

void write() :
{}
{
  ( <VISIBLE> | <INVISIBLE> ) ( <QUOTED_STRING> | <IDENT> ) ( <N> ( <QUOTED_STRING> | <IDENT>) )*
}

int integer() :
{
 Token t;
}
{
  t=<INTEGER>
  {
    return Integer.parseInt(t.image);
  }
}
